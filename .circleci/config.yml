version: 2.1

parameters:
  environment:
    type: string
    default: "nanoDeg"

commands:
  delete_stack:
    steps:
      - run:
          name: Delete a stack
          command: |
            aws cloudformation delete-stack --stack-name nanoDegBackendStack
            npm run migrations:revert
      - run: return 1

jobs:
  hello-world:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Say Hello
          command: |
            echo "Hello World"

  #build phase
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd ./frontend && npm i && npm run build 

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd ./backend && npm i && npm run build

  #test phase
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend Test
          command: | 
            cd ./frontend && npm i
            npm install --save-dev jest-junit
            JEST_JUNIT_OUTPUT_DIR="./test-results/jest/"
            npm run test --ci --reporters=default --reporters=jest-junit
          environment:
              JEST_JUNIT_OUTPUT_DIR: ./frontend/test-results/jest/
      - store_test_results:
          path: ./frontend/test-results/jest/
      - store_artifacts:
          path: ./frontend/test-results/jest/
    
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./backend/test-results/jest/
          name: Backend Test
          command: |
            cd ./backend && npm i
            npm install --save-dev jest-junit
            JEST_JUNIT_OUTPUT_DIR="./test-results/jest/"
            npm run test --ci --reporters=default --reporters=jest-junit
          
      - store_test_results:
          path: ./backend/test-results/jest/
      - store_artifacts:
          path: ./backend/test-results/jest/

  #tests for security
  frontend-security:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend Security Test
          command: | 
            cd ./frontend && npm i
            npm audit --audit-level=critical
       
  backend-security:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Backend Security Test
          command: |
            cd ./backend && npm i
            npm audit fix --audit-level=critical --force

  #Infrastructure creation
  network-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup network infrastructure
          command: |
            cd ./.circleci/files
            aws cloudformation deploy --template-file ./network.yml --stack-name nanoDegNetworkStack --region us-west-2
            
  cloudfront-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup cloudfront infrastructure
          command: |
            cd ./.circleci/files
            aws cloudformation deploy --template-file ./cloudfront.yml --stack-name nanoDegCloudfrontStack --region us-west-2

  backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup backend infrastructure
          command: |
            cd ./.circleci/files
            aws cloudformation deploy --template-file ./backend.yml --stack-name nanoDegBackendStack --region us-west-2
       
  

  frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup frontend infrastructure
          command: |
            cd ./.circleci/files
            aws cloudformation deploy --template-file ./frontend.yml --stack-name nanoDegFrontendStack --region us-west-2

  backend-config:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["48:54:a0:b5:41:d3:4e:c2:0f:f8:b4:1e:8b:08:d5:35"]
      - run:
          name: Server dependencies
          command: |
              apk add --update ansible 
              #run ansible playbook
              cd ./.circleci/ansible
              ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt main.yml

  #database migration
  dbMigration:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: database migrations
          command: |
            cd ./backend && npm i
            npm run migrations-win
  
  #ReBuild and copy backend files to ec2
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["48:54:a0:b5:41:d3:4e:c2:0f:f8:b4:1e:8b:08:d5:35"]
      - run: 
          name: Rebuild and deploy baceknd
          command: |
              cd ./backend && npm i && npm run build
              sudo apt -y update && sudo apt install -y python3
              sudo apt install python3-pip -y
              pip3 install --user ansible
              cd ../.circleci/ansible
              ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt backendCopy.yml

 
  #Rebuild and frontend files to s3bucket
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    environment:
      API_URL=ec2-34-208-170-78.us-west-2.compute.amazonaws.com
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["48:54:a0:b5:41:d3:4e:c2:0f:f8:b4:1e:8b:08:d5:35"]
      - run:
          name: Rebuild and deploy frontend
          command: |
              cd ./frontend && npm i && npm run build
              sudo apt install awscli -y
              aws s3 sync ../frontend s3://udapeople2-nanodegfront --delete

  smoketests:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: run smoke test on backend and frontend
          command: |
              #Test backend
              BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              curl "http://${BACKEND_IP}:3030/api/status"
              #Frontend Test
              URL="http://udapeople2-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
              if curl -s ${URL} | grep "Welcome"
              then
              return 1
              else
              return 0
              fi
      #- delete-stack
       # when: on_fail
    
  production-frontend:
    docker:
      - image: amazon/aws-cli
    environment:
      API_URL=ec2-34-208-170-78.us-west-2.compute.amazonaws.com
    steps:
      - checkout
      - run: |
          aws cloudformation deploy \
            --template-file ./circleci/files/frontend.yml \
            --stack-name "nanoDegNetworkStack-${CIRCLE_WORKFLOW_ID}" \
            --parameter-overrides NAME="udaproduction${CIRCLE_WORKFLOW_ID}"
      - run: aws s3 sync . s3://udapeople2-nanodegfront --delete

  production-promotion:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          aws cloudformation deploy \
            --template-file ./circleci/files/cloudfront.yml \
            --stack-name "nanoDegCloudfrontStack-${CIRCLE_WORKFLOW_ID}" \
            --parameter-overrides PipelineID="nanodegfront-${CIRCLE_WORKFLOW_ID}"

  delete_stack:
    steps:
      - run:
          name: Delete a stack
          command: |
              aws cloudformation delete-stack --stack-name nanoDegFrontStack
              aws cloudformation delete-stack --stack-name nanoCloudFrontStack

    


workflows:
  default:
    jobs:
      - hello-world
      - build-frontend:
         requires:
            - hello-world
      - build-backend:
          requires:
            - build-frontend
      - test-frontend:
          requires:
            - build-backend
      - test-backend:
          requires:
            - test-frontend
      - frontend-security:
          requires:
            - test-backend
      - backend-security:
          requires:
            - frontend-security
      - network-infrastructure:
          requires:
            - backend-security
      - network-infrastructure
      - frontend-infrastructure:
          requires:
            - network-infrastructure
      - backend-infrastructure:
          requires:
            - frontend-infrastructure
      - cloudfront-infrastructure:
          requires:
            - backend-infrastructure
      - backend-config:
          requires:
            - backend-infrastructure
      - dbMigration:
         requires:
           - backend-config
            - cloudfront-infrastructure
      
      - deploy-backend:
          requires:
            - backend-config   
      - deploy-frontend:
          requires:
            - deploy-backend
      - smoketests:
          requires:
            - deploy-frontend
      

            
